package tictactoe;

	import java.util.Scanner;

	public class TicTacToe {
	    private static char[][] board = new char[3][3];
	    private static char currentPlayer = 'X';

	    public static void main(String[] args) {
	        initializeBoard();
	        printBoard();

	        Scanner scanner = new Scanner(System.in);
	        int row, col;
	        boolean validMove;

	        // Main game loop
	        while (true) {
	            do {
	                System.out.println("Player " + currentPlayer + ", enter your move (row and column): ");
	                row = scanner.nextInt();
	                col = scanner.nextInt();
	                validMove = isValidMove(row, col);
	                if (!validMove) {
	                    System.out.println("Invalid move. Try again.");
	                }
	            } while (!validMove);

	            makeMove(row, col);
	            printBoard();

	            if (checkWin()) {
	                System.out.println("Player " + currentPlayer + " wins! Congratulations!");
	                break;
	            } else if (isBoardFull()) {
	                System.out.println("It's a draw!");
	                break;
	            }

	            currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
	        }

	        scanner.close();
	    }

	    // Initialize the board with empty spaces
	    private static void initializeBoard() {
	        for (int i = 0; i < 3; i++) {
	            for (int j = 0; j < 3; j++) {
	                board[i][j] = ' ';
	            }
	        }
	    }

	    // Print the current state of the board
	    private static void printBoard() {
	        System.out.println("-------------");
	        for (int i = 0; i < 3; i++) {
	            System.out.print("| ");
	            for (int j = 0; j < 3; j++) {
	                System.out.print(board[i][j] + " | ");
	            }
	            System.out.println("\n-------------");
	        }
	    }

	    // Check if a move is valid
	    private static boolean isValidMove(int row, int col) {
	        if (row < 0 || row >= 3 || col < 0 || col >= 3 || board[row][col] != ' ') {
	            return false;
	        }
	        return true;
	    }

	    // Make a move on the board
	    private static void makeMove(int row, int col) {
	        board[row][col] = currentPlayer;
	    }

	    // Check if the current player has won
	    private static boolean checkWin() {
	        for (int i = 0; i < 3; i++) {
	            if (board[i][0] == currentPlayer && board[i][1] == currentPlayer && board[i][2] == currentPlayer) {
	                return true; // Horizontal win
	            }
	            if (board[0][i] == currentPlayer && board[1][i] == currentPlayer && board[2][i] == currentPlayer) {
	                return true; // Vertical win
	            }
	        }
	        if (board[0][0] == currentPlayer && board[1][1] == currentPlayer && board[2][2] == currentPlayer) {
	            return true; // Diagonal win (top-left to bottom-right)
	        }
	        if (board[0][2] == currentPlayer && board[1][1] == currentPlayer && board[2][0] == currentPlayer) {
	            return true; // Diagonal win (top-right to bottom-left)
	        }
	        return false;
	    }

	    // Check if the board is full (a draw)
	    private static boolean isBoardFull() {
	        for (int i = 0; i < 3; i++) {
	            for (int j = 0; j < 3; j++) {
	                if (board[i][j] == ' ') {
	                    return false; // There's an empty space, so the board is not full
	                }
	            }
	        }
	        return true; // No empty spaces, the board is full
	    }
	}


